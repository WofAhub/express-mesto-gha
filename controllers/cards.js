// const –±–∞–∑–∞
const mongoose = require('mongoose');
const Card = require('../models/card');

// const –æ—à–∏–±–∫–∏
const ValidationError = require('../errors/ValidationError');
const NotFoundError = require('../errors/NotFoundError');

// –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
module.exports.getCard = (req, res, next) => {
  Card
    .find({})
    .populate('owner')
    .then((card) => res.status(200).send({ data: card }))
    .catch((err) => {
      next(err);
    });
};

// —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
module.exports.createCard = (req, res, next) => {
  const { name, link } = req.body;

  Card
    .create(
      {
        name,
        link,
        owner: req.user._id,
      },
    )
    .then((card) => res.status(200).send({ data: card }))

    .catch((err) => {
      if (err instanceof mongoose.Error.ValidationError) {
        const errorFields = Object.keys(err.errors);
        const errorMessage = err.errors[errorFields[0]].message;

        next(new ValidationError(errorMessage));
      } else {
        next(err);
      }
    });
};

// —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
module.exports.deleteCard = (req, res, next) => {
  const { cardId } = req.params;

  Card
    .findByIdAndRemove(cardId)
    .populate(['owner', 'likes'])
    .orFail(() => {
      throw new NotFoundError('–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    })
    .then((card) => res.status(200).send({ data: card, message: '–ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞' }))

    .catch((err) => {
      if (err.name === 'CastError') {
        next(new ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id –∫–∞—Ä—Ç–æ—á–∫–∏'));
      } else {
        next(err);
      }
    });
};

// —Å—Ç–∞–≤–∏–º –ª–∞–π–∫ –∫–∞—Ä—Ç–æ—á–∫–µ
module.exports.likeCard = (req, res, next) => {
  const { cardId } = req.params;

  Card.findByIdAndUpdate(
    cardId,
    { $addToSet: { likes: req.user._id } },
    { new: true },
  )
    .populate(['owner', 'likes'])
    .orFail(() => {
      throw new NotFoundError('–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üòî');
    })
    .then((card) => res.status(200).send({ data: card, message: '–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω ‚ù§' }))

    .catch((err) => {
      if (err.name === 'CastError') {
        next(new ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id –∫–∞—Ä—Ç–æ—á–∫–∏ ‚ùå'));
      } else {
        next(err);
      }
    });
};

// —Å—Ç–∞–≤–∏–º –¥–∏–∑–ª–∞–π–∫ –∫–∞—Ä—Ç–æ—á–∫–µ
module.exports.dislikeCard = (req, res, next) => Card
  .findByIdAndUpdate(
    req.params.cardId,
    { $pull: { likes: req.user._id } },
    { new: true },
  )
  .orFail(() => {
    throw new NotFoundError('–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üòî');
  })

  .then((card) => res.status(200).send({ data: card, message: '–õ–∞–π–∫ —É–±—Ä–∞–Ω üíî' }))

  .catch((err) => {
    if (err.name === 'CastError') {
      next(new ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id –∫–∞—Ä—Ç–æ—á–∫–∏ ‚ùå'));
    } else {
      next(err);
    }
  });
